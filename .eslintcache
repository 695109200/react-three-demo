[{"C:\\code\\react-three-demo\\src\\index.js":"1","C:\\code\\react-three-demo\\src\\router.js":"2","C:\\code\\react-three-demo\\src\\home.js":"3","C:\\code\\react-three-demo\\src\\DemoPage\\demo3.jsx":"4","C:\\code\\react-three-demo\\src\\DemoPage\\demo1.jsx":"5","C:\\code\\react-three-demo\\src\\DemoPage\\demo5.jsx":"6","C:\\code\\react-three-demo\\src\\DemoPage\\demo6.jsx":"7","C:\\code\\react-three-demo\\src\\DemoPage\\demo2.jsx":"8","C:\\code\\react-three-demo\\src\\DemoPage\\demo8.jsx":"9","C:\\code\\react-three-demo\\src\\DemoPage\\demo4.jsx":"10","C:\\code\\react-three-demo\\src\\DemoPage\\demo7.jsx":"11","C:\\code\\react-three-demo\\src\\DemoPage\\demo9.jsx":"12","C:\\code\\react-three-demo\\src\\DemoPage\\demo10.jsx":"13","C:\\code\\react-three-demo\\src\\DemoPage\\demo11.jsx":"14"},{"size":407,"mtime":1612468120897,"results":"15","hashOfConfig":"16"},{"size":1434,"mtime":1612779078860,"results":"17","hashOfConfig":"16"},{"size":2365,"mtime":1612779060964,"results":"18","hashOfConfig":"16"},{"size":2322,"mtime":1612886210258,"results":"19","hashOfConfig":"16"},{"size":1914,"mtime":1613381647036,"results":"20","hashOfConfig":"16"},{"size":2386,"mtime":1612468120896,"results":"21","hashOfConfig":"16"},{"size":2717,"mtime":1612468120896,"results":"22","hashOfConfig":"16"},{"size":2652,"mtime":1612468120895,"results":"23","hashOfConfig":"16"},{"size":3334,"mtime":1612774493063,"results":"24","hashOfConfig":"16"},{"size":3138,"mtime":1612935867213,"results":"25","hashOfConfig":"16"},{"size":4049,"mtime":1612774603216,"results":"26","hashOfConfig":"16"},{"size":4666,"mtime":1612468120897,"results":"27","hashOfConfig":"16"},{"size":2970,"mtime":1612776811314,"results":"28","hashOfConfig":"16"},{"size":6110,"mtime":1613400247549,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1ijuex0",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"32"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"32"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\code\\react-three-demo\\src\\index.js",[],["70","71"],"C:\\code\\react-three-demo\\src\\router.js",["72"],"import React from 'react';\r\nimport { HashRouter, Route, Switch,Redirect } from 'react-router-dom'\r\nimport home from './home'\r\nimport Demo1 from './DemoPage/demo1'\r\nimport Demo2 from './DemoPage/demo2'\r\nimport Demo3 from './DemoPage/demo3'\r\nimport Demo4 from './DemoPage/demo4'\r\nimport Demo5 from './DemoPage/demo5'\r\nimport Demo6 from './DemoPage/demo6'\r\nimport Demo7 from './DemoPage/demo7'\r\nimport Demo8 from './DemoPage/demo8'\r\nimport Demo9 from './DemoPage/demo9'\r\nimport Demo10 from './DemoPage/demo10'\r\nimport Demo11 from './DemoPage/demo11'\r\n\r\nconst RouterList = () => (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={home}></Route>\r\n        <Route exact path=\"/Demo1\" component={Demo1}></Route>\r\n        <Route exact path=\"/Demo2\" component={Demo2}></Route>\r\n        <Route exact path=\"/Demo3\" component={Demo3}></Route>\r\n        <Route exact path=\"/Demo4\" component={Demo4}></Route>\r\n        <Route exact path=\"/Demo5\" component={Demo5}></Route>\r\n        <Route exact path=\"/Demo6\" component={Demo6}></Route>\r\n        <Route exact path=\"/Demo7\" component={Demo7}></Route>\r\n        <Route exact path=\"/Demo8\" component={Demo8}></Route>\r\n        <Route exact path=\"/Demo9\" component={Demo9}></Route>\r\n        <Route exact path=\"/Demo10\" component={Demo10}></Route>\r\n        <Route exact path=\"/Demo11\" component={Demo11}></Route>\r\n      </Switch>\r\n    </HashRouter>\r\n);\r\n\r\nexport default RouterList;","C:\\code\\react-three-demo\\src\\home.js",["73","74","75","76","77","78","79","80","81","82","83","84"],"import css from './index.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"App\">\r\n        <h1>react-three-demo</h1>\r\n        <div className=\"demoBox\">\r\n\r\n          <Link to=\"/demo1\" target='div' className=\"demoItem\">\r\n             <img src=\"static/preview/demo1.png\"></img>\r\n             <div>旋转的立方体</div>\r\n          </Link>\r\n\r\n          <Link to=\"/demo2\" target='div' className=\"demoItem\">\r\n              <img src=\"static/preview/demo2.png\"></img>\r\n              <div>建立镜头操控,三维坐标系和地板</div>\r\n          </Link>\r\n\r\n          <Link to=\"/demo3\" target='div' className=\"demoItem\">\r\n              <img src=\"static/preview/demo3.png\"></img>\r\n              <div>载入glb模型</div>\r\n          </Link>\r\n\r\n          <Link to=\"/demo4\" target='div' className=\"demoItem\">\r\n              <img src=\"static/preview/demo4.png\"></img>\r\n              <div>获取所选中的物体</div>\r\n          </Link>\r\n\r\n          <Link to=\"/demo5\" target='div' className=\"demoItem\">\r\n              <img src=\"static/preview/demo5.png\"></img>\r\n              <div>Tween构建位移动画</div>\r\n          </Link>\r\n\r\n          <Link to=\"/demo6\" target='div' className=\"demoItem\">\r\n              <img src=\"static/preview/demo6.png\"></img>\r\n              <div>执行导入模型里的动画</div>\r\n          </Link>\r\n\r\n          <Link to=\"/demo7\" target='div' className=\"demoItem\">\r\n              <img src=\"static/preview/demo7.png\"></img>\r\n              <div>光源与阴影</div>\r\n          </Link>\r\n\r\n          <Link to=\"/demo8\" target='div' className=\"demoItem\">\r\n              <img src=\"static/preview/demo8.png\"></img>\r\n              <div>拖动模型</div>\r\n          </Link>\r\n\r\n          <Link to=\"/demo9\" target='div' className=\"demoItem\">\r\n              <img src=\"static/preview/demo9.png\"></img>\r\n              <div>点击画线测距离</div>\r\n          </Link>\r\n          <Link to=\"/demo10\" target='div' className=\"demoItem\">\r\n              <img src=\"static/preview/demo10.png\"></img>\r\n              <div>天空盒子</div>\r\n          </Link>\r\n          <Link to=\"/demo11\" target='div' className=\"demoItem\">\r\n              <img src=\"static/preview/demo11.png\"></img>\r\n              <div>仿法拉第汽车场景</div>\r\n          </Link>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Home;","C:\\code\\react-three-demo\\src\\DemoPage\\demo3.jsx",["85","86","87","88","89","90","91","92","93","94","95"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect, refs } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\nfunction Demo3() {\r\n    const [camera, setCamera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000))    //摄像机\r\n    const [scene, setScene] = useState(new Three.Scene())   //场景\r\n    const [render, setRender] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n    const [gridHelper, setGridHelper] = useState(new Three.GridHelper(70, 70))      //地板辅助线\r\n    camera.position.set(-0.3243055677386816, 16.570924182400017, 25.00598523633661)  //设置镜头位置\r\n    const [controls, setControls] = useState(new Orbitcontrols(camera, render.domElement))\r\n    const [loader, setLoader] = useState( new GLTFLoader())                 //gltf加载器\r\n    const [light, setLight] = useState( new Three.AmbientLight(0xffffff))   //全局光\r\n    const [light2, setLight2] = useState(new Three.SpotLight(0xffffff))     //跟随光\r\n    \r\n    //初始化\r\n    function init() {\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        render.setClearColor(0xFFFFFF, 1.0);    //设置渲染器的背景颜色及其透明度\r\n        scene.add(gridHelper)   //场景添加地板\r\n        scene.add(light)\r\n        scene.add(light2)\r\n    }\r\n\r\n    function load(){\r\n        //主要加载函数\r\n        loader.load(\"Bee.glb\", (object) => {\r\n            console.log(object)\r\n            scene.add(object.scene);    //加载成功添加进场景\r\n        });\r\n    }\r\n\r\n    function animation() {\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n    }\r\n\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        init()\r\n        animation()\r\n        load()\r\n\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo3;","C:\\code\\react-three-demo\\src\\DemoPage\\demo1.jsx",["96","97"],"C:\\code\\react-three-demo\\src\\DemoPage\\demo5.jsx",["98","99","100"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport TWEEN from '@tweenjs/tween.js'\r\nfunction Demo5() {\r\n    const [camera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000))    //摄像机\r\n    camera.position.set(-48.29395512934191, 22.285677525066234, -0.23486243146612543);\r\n    const [scene] = useState(new Three.Scene())   //场景\r\n    const [render] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n    const [controls] = useState(new Orbitcontrols(camera, render.domElement))\r\n    const [loader] = useState( new GLTFLoader())                 //gltf加载器\r\n    const [light] = useState( new Three.AmbientLight(0xffffff))   //全局光\r\n    const [light2] = useState(new Three.SpotLight(0xffffff))     //跟随光\r\n    const [gridHelper] = useState(new Three.GridHelper(70, 70))      //地板辅助线\r\n    //添加东西进去\r\n    function add() {\r\n        scene.add(light,gridHelper,light2)\r\n    }\r\n    function load(){\r\n        //主要加载函数\r\n        loader.load(\"Bee.glb\", (object) => {\r\n            scene.add(object.scene);    //加载成功添加进场景\r\n            var tween = new TWEEN.Tween(scene.children[3].position).to({y:20}).repeat(Infinity).yoyo(true).start()\r\n        });\r\n    }\r\n    //每秒渲染\r\n    function animation() {\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        TWEEN.update()\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n    }\r\n\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        render.domElement.removeAttribute(\"tabindex\")   //清除点击canvas的黑边\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        render.setClearColor(0xFFFFFF, 1.0);    //设置渲染器的背景颜色及其透明度\r\n        add()\r\n        animation()\r\n        load()\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo5;","C:\\code\\react-three-demo\\src\\DemoPage\\demo6.jsx",["101","102"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\nfunction Demo6() {\r\n    const [camera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000))    //摄像机\r\n    camera.position.set(-48.29395512934191, 22.285677525066234, -0.23486243146612543);\r\n    const [scene] = useState(new Three.Scene())   //场景\r\n    const [render] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n    const [controls] = useState(new Orbitcontrols(camera, render.domElement))\r\n    const [loader] = useState(new GLTFLoader())                 //gltf加载器\r\n    const [light] = useState(new Three.AmbientLight(0xffffff))   //全局光\r\n    const [light2] = useState(new Three.SpotLight(0xffffff))     //跟随光\r\n    const [gridHelper] = useState(new Three.GridHelper(70, 70))      //地板辅助线\r\n    var mixer;\r\n\r\n    //添加东西进去\r\n    function add() {\r\n        scene.add(light, gridHelper, light2)\r\n    }\r\n\r\n    //主要加载函数\r\n    function load() {\r\n        loader.load(\"Bee.glb\", (glt) => {\r\n            scene.add(glt.scene);                        //加载成功添加进场景\r\n            mixer = new Three.AnimationMixer(scene.children[3])   //把刚刚添加进场景的模型添加进动画的播放器\r\n            glt.animations.forEach((clip) => {             //循环导入模型里自带的动画数组，轮流播放\r\n                mixer.clipAction(clip).play();                    //clipAction: 获取播放器对应的动画\r\n            });\r\n        });\r\n    }\r\n\r\n    //每秒渲染\r\n    function animation() {\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        if (mixer) mixer.update(0.03)          //刷新动画渲染速度\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n    }\r\n    \r\n    //初始化\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        render.domElement.removeAttribute(\"tabindex\")   //清除点击canvas的黑边\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        render.setClearColor(0xFFFFFF, 1.0);    //设置渲染器的背景颜色及其透明度\r\n        add()\r\n        animation()\r\n        load()\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo6;","C:\\code\\react-three-demo\\src\\DemoPage\\demo2.jsx",["103","104","105","106","107","108","109","110","111"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect, refs } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\n\r\nfunction Demo2() {\r\n\r\n    const [camera, setCamera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000))    //摄像机\r\n    const [scene, setScene] = useState(new Three.Scene())   //场景\r\n    const [render, setRender] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n\r\n    const [axisHelper, setAxisHelper] = useState(new Three.AxisHelper(30, 30))      //三维坐标系\r\n    const [gridHelper, setGridHelper] = useState(new Three.GridHelper(70, 70))      //地板辅助线\r\n    camera.position.set(10, 10, 0)  //设置镜头位置\r\n    \r\n    const [controls, setControls] = useState(new Orbitcontrols(camera, render.domElement))\r\n\r\n    const geometry = new Three.BoxGeometry(1, 1, 1);    //定义geometry(一个几何体)   BoxGeometry(立方几何体)\r\n    const material = new Three.MeshBasicMaterial({ color: 0xC71585 });  //定义material(材质)  MeshBasicMaterial(网格基本材质,不受光照影响，一个以简单的着色)\r\n    const cube = new Three.Mesh(geometry, material);         //定义一个网格，这个网格由一个几何体和一个材质构成,也就是旋转着的正方体由这两个构成\r\n   \r\n    //初始化\r\n    function init() {\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        render.setClearColor(0xFFFFFF, 1.0);    //设置渲染器的背景颜色及其透明度\r\n        scene.add(axisHelper)   //场景添加三维坐标系\r\n        scene.add(gridHelper)   //场景添加地板\r\n        add()\r\n    }\r\n\r\n    function add() {\r\n        scene.add(cube);    //场景添加立方体\r\n        cube.position.set(0, 2, 0)  //设置立方体位置\r\n        camera.position.z = 5;\r\n    }\r\n\r\n    function animation() {\r\n        cube.rotation.x += 0.01;         //每次渲染正方体的x轴+0.1\r\n        cube.rotation.y += 0.01;         //每次渲染正方体的y轴+0.1\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n    }\r\n\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        init()\r\n        animation()\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo2;","C:\\code\\react-three-demo\\src\\DemoPage\\demo8.jsx",["112","113","114","115"],"import css from \"../index.css\";\r\nimport * as Three from \"three\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Orbitcontrols from \"three-orbitcontrols\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\r\nimport { TransformControls } from \"three/examples/jsm/controls/TransformControls\";\r\n\r\nfunction Demo8() {\r\n  const [camera] = useState(\r\n    new Three.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      1,\r\n      1000\r\n    )\r\n  ); //摄像机\r\n  camera.position.set(\r\n    -61.92039539596215,\r\n    37.43254204157204,\r\n    -0.3011303294813202\r\n  );\r\n  const [scene] = useState(new Three.Scene()); //场景\r\n  const [render] = useState(new Three.WebGLRenderer({ antialias: true })); //渲染器\r\n  const [controls] = useState(new Orbitcontrols(camera, render.domElement));\r\n  const [loader] = useState(new GLTFLoader()); //gltf加载器\r\n  const [light] = useState(new Three.AmbientLight(0xffffff)); //全局光\r\n  const [light2] = useState(new Three.SpotLight(0xffffff)); //跟随光\r\n  const [transformControls] = useState(\r\n    new TransformControls(camera, render.domElement)\r\n  );\r\n  const [plane] = useState(\r\n    new Three.Mesh(\r\n      new Three.PlaneBufferGeometry(70, 70),\r\n      new Three.MeshStandardMaterial({ color: 0xffffff })\r\n    )\r\n  );\r\n  const [cube] = useState(\r\n    new Three.Mesh(\r\n      new Three.CubeGeometry(4, 4, 4),\r\n      new Three.MeshLambertMaterial({ color: \"#12B7F5\" })\r\n    )\r\n  ); //跟随光\r\n\r\n  var dragControls;\r\n\r\n  //添加东西进去\r\n  function add() {\r\n    scene.add(light, light2, plane, transformControls, cube);\r\n  }\r\n  //初始地板\r\n  function initPlan() {\r\n    plane.rotation.x = -0.5 * Math.PI;\r\n    plane.receiveShadow = true;\r\n  }\r\n  //主要加载函数\r\n  function load() {\r\n    transformControls.attach(cube);\r\n\r\n    //增加拖动控制器\r\n    dragControls = new DragControls(scene.children, camera, render.domElement);\r\n\r\n    //鼠标松开后 释放镜头控制器\r\n    dragControls.addEventListener(\"dragend\", (event) => {\r\n      //   transformControls.visible = false;\r\n      controls.enabled = true;\r\n    });\r\n\r\n    //鼠标按下进行判断是否锁住镜头控制器\r\n    dragControls.addEventListener(\"dragstart\", function (event) {\r\n      if (event.object.type == \"Mesh\" || event.object.type == \"GridHelper\") {\r\n        controls.enabled = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  //每秒渲染\r\n  function animation() {\r\n    render.render(scene, camera); //每次渲染器把场景和摄像机一起渲染\r\n    requestAnimationFrame(animation); //采用系统时间间隔,保持最佳绘制效率进行渲染\r\n  }\r\n\r\n  //初始化\r\n  useEffect(() => {\r\n    render.setSize(window.innerWidth, window.innerHeight);\r\n    render.domElement.removeAttribute(\"tabindex\"); //清除点击canvas的黑边\r\n    document.getElementById(\"canvas-frame\").appendChild(render.domElement);\r\n    render.setPixelRatio(window.devicePixelRatio); //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n    render.setClearColor(0xeeeeee, 1.0); //设置渲染器的背景颜色及其透明度\r\n    add();\r\n    initPlan();\r\n    animation();\r\n    load();\r\n  });\r\n  return <div id=\"canvas-frame\"></div>;\r\n}\r\n\r\nexport default Demo8;\r\n","C:\\code\\react-three-demo\\src\\DemoPage\\demo4.jsx",["116","117","118","119","120","121"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect, refs } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nfunction Demo4() {\r\n\r\n    const [camera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000))    //摄像机\r\n    camera.position.set(-48.29395512934191, 22.285677525066234, -0.23486243146612543);\r\n    const [scene] = useState(new Three.Scene())   //场景\r\n    const [render] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n    const [loader, setLoader] = useState( new GLTFLoader())                 //gltf加载器\r\n    const [light, setLight] = useState( new Three.AmbientLight(0xffffff))   //全局光\r\n    const [light2, setLight2] = useState(new Three.SpotLight(0xffffff))     //跟随光\r\n    const [controls] = useState(new Orbitcontrols(camera, render.domElement))\r\n    const [raycaster] = useState(new Three.Raycaster())\r\n    const [mouse] = useState(new Three.Vector2())\r\n    \r\n    let intersects;\r\n    window.addEventListener('mousemove', onMouseMove, false);\r\n    window.addEventListener('mousedown', onMouseDown, false);\r\n\r\n    function onMouseMove(event) {\r\n        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n        mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\r\n    }\r\n\r\n    function onMouseDown(event) {\r\n        raycaster.setFromCamera(mouse, camera);\r\n        intersects = raycaster.intersectObjects(scene.children,true);   //intersects = 射线经过的物体数组\r\n\r\n        if (intersects.length > 0 && intersects[ 0 ].object.type !== 'GridHelper') {    //判断射线经过的物体数组的长度以及做筛选\r\n            console.log(intersects[ 0 ].object)\r\n            intersects[ 0 ].object.material.color.set( 0xff0000 );                      //数组第一个就是获取到的对象\r\n        }\r\n    }\r\n\r\n    function load(){\r\n        loader.load(\"Bee.glb\", (object) => {\r\n            scene.add(object.scene);    //加载成功添加进场景\r\n        });\r\n    }\r\n    //添加东西进去\r\n    function add() {\r\n        scene.add(new Three.GridHelper(70, 70),light2,light)\r\n    }\r\n\r\n    //每秒渲染\r\n    function animation() {\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n    }\r\n\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        render.domElement.removeAttribute(\"tabindex\")   //清除点击canvas的黑边\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        render.setClearColor(0xFFFFFF, 1.0);    //设置渲染器的背景颜色及其透明度\r\n        add()\r\n        animation()\r\n        load()\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo4;","C:\\code\\react-three-demo\\src\\DemoPage\\demo7.jsx",["122"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\r\nimport { TransformControls } from \"three/examples/jsm/controls/TransformControls\";\r\n\r\nfunction Demo7() {\r\n    const [camera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000))    //摄像机\r\n    camera.position.set(1.0129047378979918, 28.92529159500555, -44.62414386051219);\r\n\r\n    const [scene] = useState(new Three.Scene())   //场景\r\n    const [render] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n    const [controls] = useState(new Orbitcontrols(camera, render.domElement))\r\n    const [light] = useState(new Three.AmbientLight(0xffffff,0.34))   //全局光\r\n\r\n    const [light2] = useState(new Three.PointLight(0xffffff))     \r\n    const [plane] = useState(new Three.Mesh(new Three.PlaneBufferGeometry(70, 70), new Three.MeshStandardMaterial({ color: 0xeeeeee })))     //跟随光\r\n    const [cube] = useState(new Three.Mesh(new Three.CubeGeometry(4, 4, 4), new Three.MeshLambertMaterial({ color: '#12B7F5' })))     //跟随光\r\n    const [lightCube] = useState(new Three.Mesh(new Three.CubeGeometry(2, 2, 2), new Three.MeshBasicMaterial({ color: 0x00ff00,opacity:0.5,transparent:true})))     //跟随光\r\n    const [transformControls] = useState(new TransformControls(camera, render.domElement))     \r\n\r\n    var dragControls,dragArr = [];\r\n    //添加东西进去\r\n    function add() {\r\n        controls.autoRotate = true\r\n        transformControls.attach(lightCube);\r\n        transformControls.setSize(0.4);\r\n\r\n        dragArr.push(cube,lightCube,transformControls)\r\n\r\n        scene.add(light2, plane, cube, transformControls, lightCube,light)\r\n\r\n        dragControls = new DragControls(dragArr, camera, render.domElement)\r\n        //鼠标松开后 释放镜头控制器\r\n        dragControls.addEventListener('dragend', (event) => {\r\n            controls.enabled = true;\r\n        });\r\n        //鼠标按下进行判断是否锁住镜头控制器\r\n        dragControls.addEventListener('dragstart', function (event) {\r\n                controls.enabled = false;\r\n        });\r\n\r\n    }\r\n\r\n    //初始化地板\r\n    function initPlan() {\r\n        plane.rotation.x = -0.5 * Math.PI\r\n        plane.receiveShadow = true;\r\n    }\r\n    //初始化立方体\r\n    function initCube() {\r\n        cube.castShadow = true;    // 立方体的阴影\r\n        cube.position.x = -3;    // 立方体的坐标位置\r\n        cube.position.y = 3;\r\n        cube.position.z = 0;\r\n        lightCube.position.set(13.681386802704136,4.571928018846691,2.9562836363154545)\r\n    }\r\n    //初始化光源\r\n    function initLight() {\r\n        light2.castShadow = true\r\n        light2.position.set(10, 10, 10)\r\n        light2.angle = Math.PI / 4\r\n        light2.decay = 2\r\n    }\r\n\r\n    //每秒渲染\r\n    function animation() {\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n        light2.position.copy(lightCube.position)\r\n        controls.update()\r\n    }\r\n\r\n    //初始化\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        render.domElement.removeAttribute(\"tabindex\")   //清除点击canvas的黑边\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        render.setClearColor(0x000000, 1.0);    //设置渲染器的背景颜色及其透明度\r\n     \r\n        render.shadowMap.enabled = true;\r\n        initPlan()\r\n        initCube()\r\n        initLight()\r\n        add()\r\n        animation()\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo7;","C:\\code\\react-three-demo\\src\\DemoPage\\demo9.jsx",["123","124","125","126"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\n\r\nfunction Demo9() {\r\n    const [camera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000))    //摄像机\r\n    camera.position.set(-48.29395512934191, 22.285677525066234, -0.23486243146612543);\r\n    const [scene] = useState(new Three.Scene())   //场景\r\n    const [render] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n    const [controls] = useState(new Orbitcontrols(camera, render.domElement))\r\n    const [light] = useState(new Three.AmbientLight(0xffffff))   //全局光\r\n    const [plane] = useState(new Three.Mesh(new Three.PlaneBufferGeometry(70, 70), new Three.MeshStandardMaterial({ color: 0xffffff })))     //跟随光\r\n\r\n    const [firstCube] = useState(new Three.Mesh(new Three.BoxBufferGeometry(0.2, 0.2, 0.2), new Three.MeshBasicMaterial({ color: 0x000000 })))     //跟随光\r\n    const [scendCube] = useState(new Three.Mesh(new Three.BoxBufferGeometry(0.2, 0.2, 0.2), new Three.MeshBasicMaterial({ color: 0x000000 })))     //跟随光\r\n\r\n\r\n    //添加东西进去\r\n    function add() {\r\n        firstCube.visible = false\r\n        scendCube.visible = false\r\n        scene.add(light, plane, firstCube, scendCube)\r\n    }\r\n\r\n    document.addEventListener('click', function (e) {\r\n        onMouseClick(e);\r\n    });\r\n\r\n    //每秒渲染\r\n    function animation() {\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n    }\r\n\r\n    //初始光源\r\n    function initLight(){\r\n        light.position.set(10, 10, 10)\r\n    }\r\n    //初始地板\r\n    function initPlan(){\r\n        plane.rotation.x = -0.5 * Math.PI\r\n        plane.receiveShadow = true;\r\n    }\r\n\r\n    //添加直线\r\n    function addLine(){\r\n        scene.add(new Three.Line(new Three.BufferGeometry().setFromPoints([scendCube.position, firstCube.position]), new Three.LineBasicMaterial({\r\n            color: 0x000000\r\n        })))\r\n        // var center = new Three.Vector3();\r\n        // console.log(scene.children[4].getCenter(center))\r\n        // console.log(firstCube.position.distanceTo(scendCube.position))\r\n    }\r\n\r\n    //点击事件\r\n    function onMouseClick(event) {\r\n        event.preventDefault();\r\n        var vector = new Three.Vector3(); //三维坐标对象\r\n        vector.set(\r\n            (event.clientX / window.innerWidth) * 2 - 1,\r\n            -(event.clientY / window.innerHeight) * 2 + 1,\r\n            0.5\r\n        );\r\n        vector.unproject(camera);\r\n        var raycaster = new Three.Raycaster(\r\n            camera.position,\r\n            vector.sub(camera.position).normalize()\r\n        );\r\n        var intersects = raycaster.intersectObjects(\r\n            scene.children,\r\n            true\r\n        );\r\n\r\n        if (intersects.length > 0) {\r\n            var selected = intersects[0]; //取第一个物体\r\n\r\n            if (scendCube.visible == true) {    //如果第二个点是显示状态再次点击则隐藏全部\r\n                scene.children.pop()\r\n                scendCube.visible = false\r\n                firstCube.visible = false\r\n                return\r\n            }\r\n\r\n            if (firstCube.visible == true) {    //判断当前应该显示哪个点位\r\n                scendCube.visible = true        \r\n                scendCube.position.copy(selected.point)\r\n                addLine()                       //第二个显示出来了则可以进行连线\r\n                setTimeout(()=>{\r\n                    alert('长度:'+firstCube.position.distanceTo(scendCube.position))\r\n                },1200)\r\n\r\n            } else {\r\n                firstCube.visible = true\r\n                firstCube.position.copy(selected.point)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //初始化\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        render.domElement.removeAttribute(\"tabindex\")   //清除点击canvas的黑边\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        render.setClearColor(0xeeeeee, 1.0);    //设置渲染器的背景颜色及其透明度\r\n        add()\r\n        addLine()\r\n        initLight()\r\n        initPlan()\r\n        animation()\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo9;","C:\\code\\react-three-demo\\src\\DemoPage\\demo10.jsx",["127","128","129","130"],"import css from \"../index.css\";\r\nimport * as Three from \"three\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Orbitcontrols from \"three-orbitcontrols\";\r\n\r\nfunction Demo9() {\r\n  const [camera] = useState(\r\n    new Three.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      1,\r\n      1000\r\n    )\r\n  ); //摄像机\r\n  camera.position.set(\r\n    -48.29395512934191,\r\n    22.285677525066234,\r\n    -0.23486243146612543\r\n  );\r\n  const [scene] = useState(new Three.Scene()); //场景\r\n  const [render] = useState(new Three.WebGLRenderer({ antialias: true })); //渲染器\r\n  const [controls] = useState(new Orbitcontrols(camera, render.domElement));\r\n\r\n  //初始化控制器\r\n  function initContors() {\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.02;\r\n    controls.maxPolarAngle = 1.6;\r\n    controls.rotateSpeed = 0.3;\r\n  }\r\n  //初始化天空盒\r\n  function initSkyBox() {\r\n    var materials = [],\r\n      bMouseDown = false;\r\n    var x = -1;\r\n    var y = -1;\r\n    var texturepx = new Three.TextureLoader().load(\"static/mode/car/xp.jpg\");\r\n    materials.push(new Three.MeshBasicMaterial({ map: texturepx }));\r\n    var texturenx = new Three.TextureLoader().load(\"static/mode/car/xn.jpg\");\r\n    materials.push(new Three.MeshBasicMaterial({ map: texturenx }));\r\n    var texturepy = new Three.TextureLoader().load(\"static/mode/car/yp.jpg\");\r\n    materials.push(new Three.MeshBasicMaterial({ map: texturepy }));\r\n    var textureny = new Three.TextureLoader().load(\"static/mode/car/yn.jpg\");\r\n    materials.push(new Three.MeshBasicMaterial({ map: textureny }));\r\n    var texturepz = new Three.TextureLoader().load(\"static/mode/car/zp.jpg\");\r\n    materials.push(new Three.MeshBasicMaterial({ map: texturepz }));\r\n    var texturenz = new Three.TextureLoader().load(\"static/mode/car/zn.jpg\");\r\n    materials.push(new Three.MeshBasicMaterial({ map: texturenz }));\r\n    var skyBox = new Three.Mesh(\r\n      new Three.BoxBufferGeometry(300, 300, 300),\r\n      materials\r\n    );\r\n    skyBox.geometry.scale(1, 1, -1);\r\n    scene.add(skyBox);\r\n  }\r\n  //每秒渲染\r\n  function animation() {\r\n    controls.update();\r\n    render.render(scene, camera); //每次渲染器把场景和摄像机一起渲染\r\n    requestAnimationFrame(animation); //采用系统时间间隔,保持最佳绘制效率进行渲染\r\n  }\r\n\r\n  //初始化\r\n  useEffect(() => {\r\n    render.setSize(window.innerWidth, window.innerHeight);\r\n    render.domElement.removeAttribute(\"tabindex\"); //清除点击canvas的黑边\r\n    document.getElementById(\"canvas-frame\").appendChild(render.domElement);\r\n    render.setPixelRatio(window.devicePixelRatio); //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n    render.setClearColor(0xeeeeee, 1.0); //设置渲染器的背景颜色及其透明度\r\n    initSkyBox();\r\n    initContors();\r\n    animation();\r\n  });\r\n  return <div id=\"canvas-frame\"></div>;\r\n}\r\n\r\nexport default Demo9;\r\n","C:\\code\\react-three-demo\\src\\DemoPage\\demo11.jsx",["131","132","133","134","135"],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":2,"column":36,"nodeType":"142","messageId":"143","endLine":2,"endColumn":44},{"ruleId":"140","severity":1,"message":"144","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":11},{"ruleId":"145","severity":1,"message":"146","line":11,"column":14,"nodeType":"147","endLine":11,"endColumn":50},{"ruleId":"145","severity":1,"message":"146","line":16,"column":15,"nodeType":"147","endLine":16,"endColumn":51},{"ruleId":"145","severity":1,"message":"146","line":21,"column":15,"nodeType":"147","endLine":21,"endColumn":51},{"ruleId":"145","severity":1,"message":"146","line":26,"column":15,"nodeType":"147","endLine":26,"endColumn":51},{"ruleId":"145","severity":1,"message":"146","line":31,"column":15,"nodeType":"147","endLine":31,"endColumn":51},{"ruleId":"145","severity":1,"message":"146","line":36,"column":15,"nodeType":"147","endLine":36,"endColumn":51},{"ruleId":"145","severity":1,"message":"146","line":41,"column":15,"nodeType":"147","endLine":41,"endColumn":51},{"ruleId":"145","severity":1,"message":"146","line":46,"column":15,"nodeType":"147","endLine":46,"endColumn":51},{"ruleId":"145","severity":1,"message":"146","line":51,"column":15,"nodeType":"147","endLine":51,"endColumn":51},{"ruleId":"145","severity":1,"message":"146","line":55,"column":15,"nodeType":"147","endLine":55,"endColumn":52},{"ruleId":"145","severity":1,"message":"146","line":59,"column":15,"nodeType":"147","endLine":59,"endColumn":52},{"ruleId":"140","severity":1,"message":"144","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":11},{"ruleId":"140","severity":1,"message":"148","line":3,"column":38,"nodeType":"142","messageId":"143","endLine":3,"endColumn":42},{"ruleId":"140","severity":1,"message":"149","line":8,"column":20,"nodeType":"142","messageId":"143","endLine":8,"endColumn":29},{"ruleId":"140","severity":1,"message":"150","line":9,"column":19,"nodeType":"142","messageId":"143","endLine":9,"endColumn":27},{"ruleId":"140","severity":1,"message":"151","line":10,"column":20,"nodeType":"142","messageId":"143","endLine":10,"endColumn":29},{"ruleId":"140","severity":1,"message":"152","line":11,"column":24,"nodeType":"142","messageId":"143","endLine":11,"endColumn":37},{"ruleId":"140","severity":1,"message":"153","line":13,"column":12,"nodeType":"142","messageId":"143","endLine":13,"endColumn":20},{"ruleId":"140","severity":1,"message":"154","line":13,"column":22,"nodeType":"142","messageId":"143","endLine":13,"endColumn":33},{"ruleId":"140","severity":1,"message":"155","line":14,"column":20,"nodeType":"142","messageId":"143","endLine":14,"endColumn":29},{"ruleId":"140","severity":1,"message":"156","line":15,"column":19,"nodeType":"142","messageId":"143","endLine":15,"endColumn":27},{"ruleId":"140","severity":1,"message":"157","line":16,"column":20,"nodeType":"142","messageId":"143","endLine":16,"endColumn":29},{"ruleId":"140","severity":1,"message":"144","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":11},{"ruleId":"140","severity":1,"message":"148","line":3,"column":38,"nodeType":"142","messageId":"143","endLine":3,"endColumn":42},{"ruleId":"140","severity":1,"message":"144","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":11},{"ruleId":"140","severity":1,"message":"153","line":12,"column":12,"nodeType":"142","messageId":"143","endLine":12,"endColumn":20},{"ruleId":"140","severity":1,"message":"158","line":25,"column":17,"nodeType":"142","messageId":"143","endLine":25,"endColumn":22},{"ruleId":"140","severity":1,"message":"144","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":11},{"ruleId":"140","severity":1,"message":"153","line":12,"column":12,"nodeType":"142","messageId":"143","endLine":12,"endColumn":20},{"ruleId":"140","severity":1,"message":"144","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":11},{"ruleId":"140","severity":1,"message":"148","line":3,"column":38,"nodeType":"142","messageId":"143","endLine":3,"endColumn":42},{"ruleId":"140","severity":1,"message":"149","line":8,"column":20,"nodeType":"142","messageId":"143","endLine":8,"endColumn":29},{"ruleId":"140","severity":1,"message":"150","line":9,"column":19,"nodeType":"142","messageId":"143","endLine":9,"endColumn":27},{"ruleId":"140","severity":1,"message":"151","line":10,"column":20,"nodeType":"142","messageId":"143","endLine":10,"endColumn":29},{"ruleId":"140","severity":1,"message":"159","line":12,"column":24,"nodeType":"142","messageId":"143","endLine":12,"endColumn":37},{"ruleId":"140","severity":1,"message":"152","line":13,"column":24,"nodeType":"142","messageId":"143","endLine":13,"endColumn":37},{"ruleId":"140","severity":1,"message":"153","line":16,"column":12,"nodeType":"142","messageId":"143","endLine":16,"endColumn":20},{"ruleId":"140","severity":1,"message":"154","line":16,"column":22,"nodeType":"142","messageId":"143","endLine":16,"endColumn":33},{"ruleId":"140","severity":1,"message":"144","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":11},{"ruleId":"140","severity":1,"message":"160","line":26,"column":10,"nodeType":"142","messageId":"143","endLine":26,"endColumn":16},{"ruleId":"161","severity":1,"message":"162","line":71,"column":29,"nodeType":"163","messageId":"164","endLine":71,"endColumn":31},{"ruleId":"161","severity":1,"message":"162","line":71,"column":60,"nodeType":"163","messageId":"164","endLine":71,"endColumn":62},{"ruleId":"140","severity":1,"message":"144","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":11},{"ruleId":"140","severity":1,"message":"148","line":3,"column":38,"nodeType":"142","messageId":"143","endLine":3,"endColumn":42},{"ruleId":"140","severity":1,"message":"155","line":12,"column":20,"nodeType":"142","messageId":"143","endLine":12,"endColumn":29},{"ruleId":"140","severity":1,"message":"156","line":13,"column":19,"nodeType":"142","messageId":"143","endLine":13,"endColumn":27},{"ruleId":"140","severity":1,"message":"157","line":14,"column":20,"nodeType":"142","messageId":"143","endLine":14,"endColumn":29},{"ruleId":"140","severity":1,"message":"153","line":15,"column":12,"nodeType":"142","messageId":"143","endLine":15,"endColumn":20},{"ruleId":"140","severity":1,"message":"144","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":11},{"ruleId":"140","severity":1,"message":"144","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":11},{"ruleId":"140","severity":1,"message":"153","line":11,"column":12,"nodeType":"142","messageId":"143","endLine":11,"endColumn":20},{"ruleId":"161","severity":1,"message":"162","line":78,"column":35,"nodeType":"163","messageId":"164","endLine":78,"endColumn":37},{"ruleId":"161","severity":1,"message":"162","line":85,"column":35,"nodeType":"163","messageId":"164","endLine":85,"endColumn":37},{"ruleId":"140","severity":1,"message":"144","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":11},{"ruleId":"140","severity":1,"message":"165","line":34,"column":7,"nodeType":"142","messageId":"143","endLine":34,"endColumn":17},{"ruleId":"140","severity":1,"message":"166","line":35,"column":9,"nodeType":"142","messageId":"143","endLine":35,"endColumn":10},{"ruleId":"140","severity":1,"message":"167","line":36,"column":9,"nodeType":"142","messageId":"143","endLine":36,"endColumn":10},{"ruleId":"140","severity":1,"message":"144","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":11},{"ruleId":"140","severity":1,"message":"158","line":39,"column":9,"nodeType":"142","messageId":"143","endLine":39,"endColumn":14},{"ruleId":"140","severity":1,"message":"168","line":40,"column":9,"nodeType":"142","messageId":"143","endLine":40,"endColumn":15},{"ruleId":"140","severity":1,"message":"169","line":41,"column":9,"nodeType":"142","messageId":"143","endLine":41,"endColumn":15},{"ruleId":"140","severity":1,"message":"170","line":42,"column":9,"nodeType":"142","messageId":"143","endLine":42,"endColumn":15},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'refs' is defined but never used.","'setCamera' is assigned a value but never used.","'setScene' is assigned a value but never used.","'setRender' is assigned a value but never used.","'setGridHelper' is assigned a value but never used.","'controls' is assigned a value but never used.","'setControls' is assigned a value but never used.","'setLoader' is assigned a value but never used.","'setLight' is assigned a value but never used.","'setLight2' is assigned a value but never used.","'tween' is assigned a value but never used.","'setAxisHelper' is assigned a value but never used.","'loader' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'bMouseDown' is assigned a value but never used.","'x' is assigned a value but never used.","'y' is assigned a value but never used.","'tween1' is assigned a value but never used.","'tween2' is assigned a value but never used.","'tween3' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
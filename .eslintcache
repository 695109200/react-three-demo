[{"D:\\build\\myDemo\\react-three\\src\\index.js":"1","D:\\build\\myDemo\\react-three\\src\\router.js":"2","D:\\build\\myDemo\\react-three\\src\\home.js":"3","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo1.jsx":"4","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo2.jsx":"5","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo3.jsx":"6","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo4.jsx":"7","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo5.jsx":"8","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo6.jsx":"9","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo7.jsx":"10","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo8.jsx":"11","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo9.jsx":"12"},{"size":393,"mtime":1609914892360,"results":"13","hashOfConfig":"14"},{"size":1224,"mtime":1611731451559,"results":"15","hashOfConfig":"14"},{"size":2110,"mtime":1611738719882,"results":"16","hashOfConfig":"14"},{"size":1888,"mtime":1610006718684,"results":"17","hashOfConfig":"14"},{"size":2652,"mtime":1610008227172,"results":"18","hashOfConfig":"14"},{"size":2289,"mtime":1610098148781,"results":"19","hashOfConfig":"14"},{"size":3089,"mtime":1610351010758,"results":"20","hashOfConfig":"14"},{"size":2386,"mtime":1610347785566,"results":"21","hashOfConfig":"14"},{"size":2717,"mtime":1610347725133,"results":"22","hashOfConfig":"14"},{"size":4042,"mtime":1611731551406,"results":"23","hashOfConfig":"14"},{"size":3682,"mtime":1611728942780,"results":"24","hashOfConfig":"14"},{"size":4666,"mtime":1611738662239,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"syvgzq",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"28"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\build\\myDemo\\react-three\\src\\index.js",[],["60","61"],"D:\\build\\myDemo\\react-three\\src\\router.js",["62"],"import React from 'react';\r\nimport { HashRouter, Route, Switch,Redirect } from 'react-router-dom'\r\nimport home from './home'\r\nimport Demo1 from './DemoPage/demo1'\r\nimport Demo2 from './DemoPage/demo2'\r\nimport Demo3 from './DemoPage/demo3'\r\nimport Demo4 from './DemoPage/demo4'\r\nimport Demo5 from './DemoPage/demo5'\r\nimport Demo6 from './DemoPage/demo6'\r\nimport Demo7 from './DemoPage/demo7'\r\nimport Demo8 from './DemoPage/demo8'\r\nimport Demo9 from './DemoPage/demo9'\r\n\r\nconst RouterList = () => (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={home}></Route>\r\n        <Route exact path=\"/Demo1\" component={Demo1}></Route>\r\n        <Route exact path=\"/Demo2\" component={Demo2}></Route>\r\n        <Route exact path=\"/Demo3\" component={Demo3}></Route>\r\n        <Route exact path=\"/Demo4\" component={Demo4}></Route>\r\n        <Route exact path=\"/Demo5\" component={Demo5}></Route>\r\n        <Route exact path=\"/Demo6\" component={Demo6}></Route>\r\n        <Route exact path=\"/Demo7\" component={Demo7}></Route>\r\n        <Route exact path=\"/Demo8\" component={Demo8}></Route>\r\n        <Route exact path=\"/Demo9\" component={Demo9}></Route>\r\n      </Switch>\r\n    </HashRouter>\r\n);\r\n\r\nexport default RouterList;","D:\\build\\myDemo\\react-three\\src\\home.js",["63","64","65","66","67","68","69","70","71","72","73"],"D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo1.jsx",["74","75"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect, refs } from 'react'\r\nfunction Demo1() {\r\n\r\n  const [camera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000))    //摄像机\r\n  const [scene] = useState(new Three.Scene())   //场景\r\n  const [render] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n  const geometry = new Three.BoxGeometry(1, 1, 1);  //定义geometry(一个几何体)   BoxGeometry(立方几何体)\r\n  const material = new Three.MeshBasicMaterial({ color: 0xC71585 });  //定义material(材质)  MeshBasicMaterial(网格基本材质,不受光照影响，一个以简单的着色)\r\n  const cube = new Three.Mesh(geometry, material);  //定义一个网格，这个网格由一个几何体和一个材质构成,也就是旋转着的正方体由这两个构成\r\n\r\n  function add() {\r\n    scene.add(cube);  //往场景添加正方体\r\n    camera.position.z = 5;\r\n  }\r\n\r\n  function animation() {\r\n    cube.rotation.x += 0.01;            //每次渲染正方体的x轴+0.1\r\n    cube.rotation.y += 0.01;            //每次渲染正方体的y轴+0.1\r\n    render.render(scene, camera);       //每次渲染器把场景和摄像机一起渲染\r\n    requestAnimationFrame(animation);   //采用系统时间间隔,保持最佳绘制效率进行渲染\r\n  }\r\n\r\n  useEffect(() => {\r\n    render.setSize(window.innerWidth, window.innerHeight)\r\n    document.getElementById('canvas-frame').appendChild(render.domElement);\r\n    render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n    render.setClearColor(0xFFFFFF, 1.0);          //设置渲染器的背景颜色及其透明度\r\n    add()\r\n    animation()\r\n  })\r\n\r\n  return (\r\n    <div id='canvas-frame'></div>\r\n  );\r\n}\r\n\r\nexport default Demo1;","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo2.jsx",["76","77","78","79","80","81","82","83","84"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect, refs } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\n\r\nfunction Demo2() {\r\n\r\n    const [camera, setCamera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000))    //摄像机\r\n    const [scene, setScene] = useState(new Three.Scene())   //场景\r\n    const [render, setRender] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n\r\n    const [axisHelper, setAxisHelper] = useState(new Three.AxisHelper(30, 30))      //三维坐标系\r\n    const [gridHelper, setGridHelper] = useState(new Three.GridHelper(70, 70))      //地板辅助线\r\n    camera.position.set(10, 10, 0)  //设置镜头位置\r\n    \r\n    const [controls, setControls] = useState(new Orbitcontrols(camera, render.domElement))\r\n\r\n    const geometry = new Three.BoxGeometry(1, 1, 1);    //定义geometry(一个几何体)   BoxGeometry(立方几何体)\r\n    const material = new Three.MeshBasicMaterial({ color: 0xC71585 });  //定义material(材质)  MeshBasicMaterial(网格基本材质,不受光照影响，一个以简单的着色)\r\n    const cube = new Three.Mesh(geometry, material);         //定义一个网格，这个网格由一个几何体和一个材质构成,也就是旋转着的正方体由这两个构成\r\n   \r\n    //初始化\r\n    function init() {\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        render.setClearColor(0xFFFFFF, 1.0);    //设置渲染器的背景颜色及其透明度\r\n        scene.add(axisHelper)   //场景添加三维坐标系\r\n        scene.add(gridHelper)   //场景添加地板\r\n        add()\r\n    }\r\n\r\n    function add() {\r\n        scene.add(cube);    //场景添加立方体\r\n        cube.position.set(0, 2, 0)  //设置立方体位置\r\n        camera.position.z = 5;\r\n    }\r\n\r\n    function animation() {\r\n        cube.rotation.x += 0.01;         //每次渲染正方体的x轴+0.1\r\n        cube.rotation.y += 0.01;         //每次渲染正方体的y轴+0.1\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n    }\r\n\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        init()\r\n        animation()\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo2;","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo3.jsx",["85","86","87","88","89","90","91","92","93","94","95"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect, refs } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\nfunction Demo3() {\r\n    const [camera, setCamera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000))    //摄像机\r\n    const [scene, setScene] = useState(new Three.Scene())   //场景\r\n    const [render, setRender] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n    const [gridHelper, setGridHelper] = useState(new Three.GridHelper(70, 70))      //地板辅助线\r\n    camera.position.set(-0.3243055677386816, 16.570924182400017, 25.00598523633661)  //设置镜头位置\r\n    const [controls, setControls] = useState(new Orbitcontrols(camera, render.domElement))\r\n    const [loader, setLoader] = useState( new GLTFLoader())                 //gltf加载器\r\n    const [light, setLight] = useState( new Three.AmbientLight(0xffffff))   //全局光\r\n    const [light2, setLight2] = useState(new Three.SpotLight(0xffffff))     //跟随光\r\n    \r\n    //初始化\r\n    function init() {\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        render.setClearColor(0xFFFFFF, 1.0);    //设置渲染器的背景颜色及其透明度\r\n        scene.add(gridHelper)   //场景添加地板\r\n        scene.add(light)\r\n        scene.add(light2)\r\n    }\r\n\r\n    function load(){\r\n        //主要加载函数\r\n        loader.load(\"Bee.glb\", (object) => {\r\n            scene.add(object.scene);    //加载成功添加进场景\r\n        });\r\n    }\r\n\r\n    function animation() {\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n    }\r\n\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        init()\r\n        animation()\r\n        load()\r\n\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo3;","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo4.jsx",["96","97","98","99","100","101"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect, refs } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nfunction Demo4() {\r\n\r\n    const [camera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000))    //摄像机\r\n    camera.position.set(-48.29395512934191, 22.285677525066234, -0.23486243146612543);\r\n    const [scene] = useState(new Three.Scene())   //场景\r\n    const [render] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n    const [loader, setLoader] = useState( new GLTFLoader())                 //gltf加载器\r\n    const [light, setLight] = useState( new Three.AmbientLight(0xffffff))   //全局光\r\n    const [light2, setLight2] = useState(new Three.SpotLight(0xffffff))     //跟随光\r\n    const [controls] = useState(new Orbitcontrols(camera, render.domElement))\r\n    const [raycaster] = useState(new Three.Raycaster())\r\n    const [mouse] = useState(new Three.Vector2())\r\n    \r\n    let intersects;\r\n    window.addEventListener('mousemove', onMouseMove, false);\r\n    window.addEventListener('mousedown', onMouseDown, false);\r\n\r\n    function onMouseMove(event) {\r\n        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n        mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\r\n    }\r\n\r\n    function onMouseDown(event) {\r\n        raycaster.setFromCamera(mouse, camera);\r\n        intersects = raycaster.intersectObjects(scene.children,true);   //intersects = 射线经过的物体数组\r\n\r\n        if (intersects.length > 0 && intersects[ 0 ].object.type !== 'GridHelper') {    //判断射线经过的物体数组的长度以及做筛选\r\n            intersects[ 0 ].object.material.color.set( 0xff0000 );                      //数组第一个就是获取到的对象\r\n        }\r\n    }\r\n\r\n    function load(){\r\n        loader.load(\"Bee.glb\", (object) => {\r\n            scene.add(object.scene);    //加载成功添加进场景\r\n        });\r\n    }\r\n    //添加东西进去\r\n    function add() {\r\n        scene.add(new Three.GridHelper(70, 70),light2,light)\r\n    }\r\n\r\n    //每秒渲染\r\n    function animation() {\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n    }\r\n\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        render.domElement.removeAttribute(\"tabindex\")   //清除点击canvas的黑边\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        render.setClearColor(0xFFFFFF, 1.0);    //设置渲染器的背景颜色及其透明度\r\n        add()\r\n        animation()\r\n        load()\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo4;","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo5.jsx",["102","103","104"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport TWEEN from '@tweenjs/tween.js'\r\nfunction Demo5() {\r\n    const [camera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000))    //摄像机\r\n    camera.position.set(-48.29395512934191, 22.285677525066234, -0.23486243146612543);\r\n    const [scene] = useState(new Three.Scene())   //场景\r\n    const [render] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n    const [controls] = useState(new Orbitcontrols(camera, render.domElement))\r\n    const [loader] = useState( new GLTFLoader())                 //gltf加载器\r\n    const [light] = useState( new Three.AmbientLight(0xffffff))   //全局光\r\n    const [light2] = useState(new Three.SpotLight(0xffffff))     //跟随光\r\n    const [gridHelper] = useState(new Three.GridHelper(70, 70))      //地板辅助线\r\n    //添加东西进去\r\n    function add() {\r\n        scene.add(light,gridHelper,light2)\r\n    }\r\n    function load(){\r\n        //主要加载函数\r\n        loader.load(\"Bee.glb\", (object) => {\r\n            scene.add(object.scene);    //加载成功添加进场景\r\n            var tween = new TWEEN.Tween(scene.children[3].position).to({y:20}).repeat(Infinity).yoyo(true).start()\r\n        });\r\n    }\r\n    //每秒渲染\r\n    function animation() {\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        TWEEN.update()\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n    }\r\n\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        render.domElement.removeAttribute(\"tabindex\")   //清除点击canvas的黑边\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        render.setClearColor(0xFFFFFF, 1.0);    //设置渲染器的背景颜色及其透明度\r\n        add()\r\n        animation()\r\n        load()\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo5;","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo6.jsx",["105","106"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\nfunction Demo6() {\r\n    const [camera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000))    //摄像机\r\n    camera.position.set(-48.29395512934191, 22.285677525066234, -0.23486243146612543);\r\n    const [scene] = useState(new Three.Scene())   //场景\r\n    const [render] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n    const [controls] = useState(new Orbitcontrols(camera, render.domElement))\r\n    const [loader] = useState(new GLTFLoader())                 //gltf加载器\r\n    const [light] = useState(new Three.AmbientLight(0xffffff))   //全局光\r\n    const [light2] = useState(new Three.SpotLight(0xffffff))     //跟随光\r\n    const [gridHelper] = useState(new Three.GridHelper(70, 70))      //地板辅助线\r\n    var mixer;\r\n\r\n    //添加东西进去\r\n    function add() {\r\n        scene.add(light, gridHelper, light2)\r\n    }\r\n\r\n    //主要加载函数\r\n    function load() {\r\n        loader.load(\"Bee.glb\", (glt) => {\r\n            scene.add(glt.scene);                        //加载成功添加进场景\r\n            mixer = new Three.AnimationMixer(scene.children[3])   //把刚刚添加进场景的模型添加进动画的播放器\r\n            glt.animations.forEach((clip) => {             //循环导入模型里自带的动画数组，轮流播放\r\n                mixer.clipAction(clip).play();                    //clipAction: 获取播放器对应的动画\r\n            });\r\n        });\r\n    }\r\n\r\n    //每秒渲染\r\n    function animation() {\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        if (mixer) mixer.update(0.03)          //刷新动画渲染速度\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n    }\r\n    \r\n    //初始化\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        render.domElement.removeAttribute(\"tabindex\")   //清除点击canvas的黑边\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        render.setClearColor(0xFFFFFF, 1.0);    //设置渲染器的背景颜色及其透明度\r\n        add()\r\n        animation()\r\n        load()\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo6;","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo7.jsx",["107"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\r\nimport { TransformControls } from \"three/examples/jsm/controls/TransformControls\";\r\n\r\nfunction Demo7() {\r\n    const [camera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000))    //摄像机\r\n    camera.position.set(1.0129047378979918, 28.92529159500555, -44.62414386051219);\r\n\r\n    const [scene] = useState(new Three.Scene())   //场景\r\n    const [render] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n    const [controls] = useState(new Orbitcontrols(camera, render.domElement))\r\n    const [light] = useState(new Three.AmbientLight(0xffffff,0.34))   //全局光\r\n\r\n    const [light2] = useState(new Three.PointLight(0xffffff))     \r\n    const [plane] = useState(new Three.Mesh(new Three.PlaneBufferGeometry(70, 70), new Three.MeshStandardMaterial({ color: 0xeeeeee })))     //跟随光\r\n    const [cube] = useState(new Three.Mesh(new Three.CubeGeometry(4, 4, 4), new Three.MeshLambertMaterial({ color: '#12B7F5' })))     //跟随光\r\n    const [lightCube] = useState(new Three.Mesh(new Three.CubeGeometry(2, 2, 2), new Three.MeshBasicMaterial({ color: 0x00ff00,opacity:0.5,transparent:true})))     //跟随光\r\n    const [transformControls] = useState(new TransformControls(camera, render.domElement))     \r\n\r\n    var dragControls,dragArr = [];\r\n    //添加东西进去\r\n    function add() {\r\n        controls.autoRotate = true\r\n        transformControls.attach(lightCube);\r\n        transformControls.setSize(0.4);\r\n\r\n        dragArr.push(cube,lightCube,transformControls)\r\n\r\n        scene.add(light2, plane, cube, transformControls, lightCube,light)\r\n\r\n        dragControls = new DragControls(dragArr, camera, render.domElement)\r\n        //鼠标松开后 释放镜头控制器\r\n        dragControls.addEventListener('dragend', (event) => {\r\n            controls.enabled = true;\r\n        });\r\n        //鼠标按下进行判断是否锁住镜头控制器\r\n        dragControls.addEventListener('dragstart', function (event) {\r\n                controls.enabled = false;\r\n        });\r\n\r\n    }\r\n\r\n    //初始化地板\r\n    function initPlan() {\r\n        plane.rotation.x = -0.5 * Math.PI\r\n        plane.receiveShadow = true;\r\n    }\r\n    //初始化立方体\r\n    function initCube() {\r\n        cube.castShadow = true;    // 立方体的阴影\r\n        cube.position.x = -3;    // 立方体的坐标位置\r\n        cube.position.y = 3;\r\n        cube.position.z = 0;\r\n        lightCube.position.set(13.681386802704136,4.571928018846691,2.9562836363154545)\r\n    }\r\n    //初始化光源\r\n    function initLight() {\r\n        light2.castShadow = true\r\n        light2.position.set(10, 10, 10)\r\n        light2.angle = Math.PI / 4\r\n        light2.decay = 2\r\n    }\r\n\r\n    //每秒渲染\r\n    function animation() {\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n        light2.position.copy(lightCube.position)\r\n        controls.update()\r\n    }\r\n\r\n    //初始化\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        render.domElement.removeAttribute(\"tabindex\")   //清除点击canvas的黑边\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        render.setClearColor(0x000000, 1.0);    //设置渲染器的背景颜色及其透明度\r\n        render.shadowMap.enabled = true;\r\n        initPlan()\r\n        initCube()\r\n        initLight()\r\n        add()\r\n        animation()\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo7;","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo8.jsx",["108","109","110","111"],"import css from '../index.css'\r\nimport * as Three from 'three';\r\nimport React, { useState, useEffect } from 'react'\r\nimport Orbitcontrols from 'three-orbitcontrols';\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\r\nimport { TransformControls } from \"three/examples/jsm/controls/TransformControls\";\r\n\r\nfunction Demo8() {\r\n    const [camera] = useState(new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000))    //摄像机\r\n    camera.position.set(-48.29395512934191, 22.285677525066234, -0.23486243146612543);\r\n    const [scene] = useState(new Three.Scene())   //场景\r\n    const [render] = useState(new Three.WebGLRenderer({ antialias: true }))  //渲染器\r\n    const [controls] = useState(new Orbitcontrols(camera, render.domElement))\r\n    const [loader] = useState(new GLTFLoader())                 //gltf加载器\r\n    const [light] = useState(new Three.AmbientLight(0xffffff))   //全局光\r\n    const [light2] = useState(new Three.SpotLight(0xffffff))     //跟随光\r\n    const [gridHelper] = useState(new Three.GridHelper(70, 70))      //地板辅助线\r\n    const [transformControls] = useState(new TransformControls(camera, render.domElement))      //地板辅助线\r\n\r\n    var mixer, dragControls;\r\n\r\n    //添加东西进去\r\n    function add() {\r\n        scene.add(light, gridHelper, light2, transformControls)\r\n    }\r\n\r\n    //主要加载函数\r\n    function load() {\r\n        loader.load(\"Barytes.glb\", (glt) => {\r\n            scene.add(glt.scene);                        //加载成功添加进场景\r\n            scene.children[4].scale.set(40, 40, 40)\r\n            light2.position.set(0, 10, 0)\r\n        });\r\n\r\n        //增加拖动控制器\r\n        dragControls = new DragControls(scene.children, camera, render.domElement)\r\n\r\n        //鼠标滑过选中的物体，并进行过滤\r\n        dragControls.addEventListener('hoveron', function (event) {\r\n            if (event.object.type == 'Mesh') {\r\n                transformControls.attach(event.object);\r\n                transformControls.setSize(0.4);\r\n            }\r\n        });\r\n\r\n        //鼠标松开后 释放镜头控制器\r\n        dragControls.addEventListener('dragend', (event) => {\r\n            transformControls.visible = false\r\n            controls.enabled = true;\r\n\r\n        });\r\n\r\n        //鼠标按下进行判断是否锁住镜头控制器\r\n        dragControls.addEventListener('dragstart', function (event) {\r\n            if (event.object.type == 'Mesh' || event.object.type == 'GridHelper') {\r\n                controls.enabled = false;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    //每秒渲染\r\n    function animation() {\r\n        render.render(scene, camera);    //每次渲染器把场景和摄像机一起渲染\r\n        if (mixer) mixer.update(0.03)          //刷新动画渲染速度\r\n        requestAnimationFrame(animation);//采用系统时间间隔,保持最佳绘制效率进行渲染\r\n    }\r\n\r\n    //初始化\r\n    useEffect(() => {\r\n        render.setSize(window.innerWidth, window.innerHeight)\r\n        render.domElement.removeAttribute(\"tabindex\")   //清除点击canvas的黑边\r\n        document.getElementById('canvas-frame').appendChild(render.domElement);\r\n        render.setPixelRatio(window.devicePixelRatio);  //设置渲染器设备像素比。通常用于避免HiDPI设备上绘图模糊\r\n        // render.setClearColor(0xFFFFFF, 1.0);    //设置渲染器的背景颜色及其透明度\r\n        add()\r\n        animation()\r\n        load()\r\n    })\r\n    return (\r\n        <div id='canvas-frame'></div>\r\n    );\r\n}\r\n\r\nexport default Demo8;","D:\\build\\myDemo\\react-three\\src\\DemoPage\\demo9.jsx",["112","113","114","115"],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":2,"column":36,"nodeType":"122","messageId":"123","endLine":2,"endColumn":44},{"ruleId":"120","severity":1,"message":"124","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":11},{"ruleId":"125","severity":1,"message":"126","line":11,"column":14,"nodeType":"127","endLine":11,"endColumn":50},{"ruleId":"125","severity":1,"message":"126","line":16,"column":15,"nodeType":"127","endLine":16,"endColumn":51},{"ruleId":"125","severity":1,"message":"126","line":21,"column":15,"nodeType":"127","endLine":21,"endColumn":51},{"ruleId":"125","severity":1,"message":"126","line":26,"column":15,"nodeType":"127","endLine":26,"endColumn":51},{"ruleId":"125","severity":1,"message":"126","line":31,"column":15,"nodeType":"127","endLine":31,"endColumn":51},{"ruleId":"125","severity":1,"message":"126","line":36,"column":15,"nodeType":"127","endLine":36,"endColumn":51},{"ruleId":"125","severity":1,"message":"126","line":41,"column":15,"nodeType":"127","endLine":41,"endColumn":51},{"ruleId":"125","severity":1,"message":"126","line":46,"column":15,"nodeType":"127","endLine":46,"endColumn":51},{"ruleId":"125","severity":1,"message":"126","line":51,"column":15,"nodeType":"127","endLine":51,"endColumn":51},{"ruleId":"125","severity":1,"message":"126","line":55,"column":15,"nodeType":"127","endLine":55,"endColumn":52},{"ruleId":"120","severity":1,"message":"124","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":11},{"ruleId":"120","severity":1,"message":"128","line":3,"column":38,"nodeType":"122","messageId":"123","endLine":3,"endColumn":42},{"ruleId":"120","severity":1,"message":"124","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":11},{"ruleId":"120","severity":1,"message":"128","line":3,"column":38,"nodeType":"122","messageId":"123","endLine":3,"endColumn":42},{"ruleId":"120","severity":1,"message":"129","line":8,"column":20,"nodeType":"122","messageId":"123","endLine":8,"endColumn":29},{"ruleId":"120","severity":1,"message":"130","line":9,"column":19,"nodeType":"122","messageId":"123","endLine":9,"endColumn":27},{"ruleId":"120","severity":1,"message":"131","line":10,"column":20,"nodeType":"122","messageId":"123","endLine":10,"endColumn":29},{"ruleId":"120","severity":1,"message":"132","line":12,"column":24,"nodeType":"122","messageId":"123","endLine":12,"endColumn":37},{"ruleId":"120","severity":1,"message":"133","line":13,"column":24,"nodeType":"122","messageId":"123","endLine":13,"endColumn":37},{"ruleId":"120","severity":1,"message":"134","line":16,"column":12,"nodeType":"122","messageId":"123","endLine":16,"endColumn":20},{"ruleId":"120","severity":1,"message":"135","line":16,"column":22,"nodeType":"122","messageId":"123","endLine":16,"endColumn":33},{"ruleId":"120","severity":1,"message":"124","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":11},{"ruleId":"120","severity":1,"message":"128","line":3,"column":38,"nodeType":"122","messageId":"123","endLine":3,"endColumn":42},{"ruleId":"120","severity":1,"message":"129","line":8,"column":20,"nodeType":"122","messageId":"123","endLine":8,"endColumn":29},{"ruleId":"120","severity":1,"message":"130","line":9,"column":19,"nodeType":"122","messageId":"123","endLine":9,"endColumn":27},{"ruleId":"120","severity":1,"message":"131","line":10,"column":20,"nodeType":"122","messageId":"123","endLine":10,"endColumn":29},{"ruleId":"120","severity":1,"message":"133","line":11,"column":24,"nodeType":"122","messageId":"123","endLine":11,"endColumn":37},{"ruleId":"120","severity":1,"message":"134","line":13,"column":12,"nodeType":"122","messageId":"123","endLine":13,"endColumn":20},{"ruleId":"120","severity":1,"message":"135","line":13,"column":22,"nodeType":"122","messageId":"123","endLine":13,"endColumn":33},{"ruleId":"120","severity":1,"message":"136","line":14,"column":20,"nodeType":"122","messageId":"123","endLine":14,"endColumn":29},{"ruleId":"120","severity":1,"message":"137","line":15,"column":19,"nodeType":"122","messageId":"123","endLine":15,"endColumn":27},{"ruleId":"120","severity":1,"message":"138","line":16,"column":20,"nodeType":"122","messageId":"123","endLine":16,"endColumn":29},{"ruleId":"120","severity":1,"message":"124","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":11},{"ruleId":"120","severity":1,"message":"128","line":3,"column":38,"nodeType":"122","messageId":"123","endLine":3,"endColumn":42},{"ruleId":"120","severity":1,"message":"136","line":12,"column":20,"nodeType":"122","messageId":"123","endLine":12,"endColumn":29},{"ruleId":"120","severity":1,"message":"137","line":13,"column":19,"nodeType":"122","messageId":"123","endLine":13,"endColumn":27},{"ruleId":"120","severity":1,"message":"138","line":14,"column":20,"nodeType":"122","messageId":"123","endLine":14,"endColumn":29},{"ruleId":"120","severity":1,"message":"134","line":15,"column":12,"nodeType":"122","messageId":"123","endLine":15,"endColumn":20},{"ruleId":"120","severity":1,"message":"124","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":11},{"ruleId":"120","severity":1,"message":"134","line":12,"column":12,"nodeType":"122","messageId":"123","endLine":12,"endColumn":20},{"ruleId":"120","severity":1,"message":"139","line":25,"column":17,"nodeType":"122","messageId":"123","endLine":25,"endColumn":22},{"ruleId":"120","severity":1,"message":"124","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":11},{"ruleId":"120","severity":1,"message":"134","line":12,"column":12,"nodeType":"122","messageId":"123","endLine":12,"endColumn":20},{"ruleId":"120","severity":1,"message":"124","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":11},{"ruleId":"120","severity":1,"message":"124","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":11},{"ruleId":"140","severity":1,"message":"141","line":41,"column":35,"nodeType":"142","messageId":"143","endLine":41,"endColumn":37},{"ruleId":"140","severity":1,"message":"141","line":56,"column":35,"nodeType":"142","messageId":"143","endLine":56,"endColumn":37},{"ruleId":"140","severity":1,"message":"141","line":56,"column":66,"nodeType":"142","messageId":"143","endLine":56,"endColumn":68},{"ruleId":"120","severity":1,"message":"124","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":11},{"ruleId":"120","severity":1,"message":"134","line":11,"column":12,"nodeType":"122","messageId":"123","endLine":11,"endColumn":20},{"ruleId":"140","severity":1,"message":"141","line":78,"column":35,"nodeType":"142","messageId":"143","endLine":78,"endColumn":37},{"ruleId":"140","severity":1,"message":"141","line":85,"column":35,"nodeType":"142","messageId":"143","endLine":85,"endColumn":37},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'refs' is defined but never used.","'setCamera' is assigned a value but never used.","'setScene' is assigned a value but never used.","'setRender' is assigned a value but never used.","'setAxisHelper' is assigned a value but never used.","'setGridHelper' is assigned a value but never used.","'controls' is assigned a value but never used.","'setControls' is assigned a value but never used.","'setLoader' is assigned a value but never used.","'setLight' is assigned a value but never used.","'setLight2' is assigned a value but never used.","'tween' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]